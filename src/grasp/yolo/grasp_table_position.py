import qi
import sys

def make_nao_grasp(session):
    """
    让NAO机器人抓球
    """
    names = list()
    times = list()
    keys = list()

    names.append("HeadPitch")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[0.0199001, [3, -0.346667, 0], [3, 0.346667, 0]], [0.00302602, [3, -0.346667, 0], [3, 0.346667, 0]], [0.0275701, [3, -0.346667, 0], [3, 0.453333, 0]], [0.0275701, [3, -0.453333, 0], [3, 0.613333, 0]], [0.00609398, [3, -0.613333, 0], [3, 1.81333, 0]], [0.0275701, [3, -1.81333, 0], [3, 0.6, 0]], [0.0275701, [3, -0.6, 0], [3, 0.466667, 0]], [0.0199001, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("HeadYaw")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[-0.0153821, [3, -0.346667, 0], [3, 0.346667, 0]], [-0.00310993, [3, -0.346667, 0], [3, 0.346667, 0]], [-0.0153821, [3, -0.346667, 0], [3, 0.453333, 0]], [-0.0153821, [3, -0.453333, 0], [3, 0.613333, 0]], [-4.19617e-05, [3, -0.613333, 0], [3, 1.81333, 0]], [-0.0153821, [3, -1.81333, 0], [3, 0.6, 0]], [-0.0153821, [3, -0.6, 0], [3, 0.466667, 0]], [-0.0153821, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("LAnklePitch")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[-0.34826, [3, -0.346667, 0], [3, 0.346667, 0]], [-0.349794, [3, -0.346667, 0], [3, 0.346667, 0]], [-0.34826, [3, -0.346667, 0], [3, 0.453333, 0]], [-0.351328, [3, -0.453333, 0.000652003], [3, 0.613333, -0.000882122]], [-0.352862, [3, -0.613333, 0], [3, 1.81333, 0]], [-0.346725, [3, -1.81333, 0], [3, 0.6, 0]], [-0.354396, [3, -0.6, 0], [3, 0.466667, 0]], [-0.34826, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("LAnkleRoll")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[4.19617e-05, [3, -0.346667, 0], [3, 0.346667, 0]], [0.00924586, [3, -0.346667, 0], [3, 0.346667, 0]], [0.00310993, [3, -0.346667, 0.0017726], [3, 0.453333, -0.00231802]], [-0.00302602, [3, -0.453333, 0], [3, 0.613333, 0]], [0.00464392, [3, -0.613333, -0.000518849], [3, 1.81333, 0.00153399]], [0.00617791, [3, -1.81333, 0], [3, 0.6, 0]], [4.19617e-05, [3, -0.6, 0], [3, 0.466667, 0]], [4.19617e-05, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("LElbowRoll")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[-0.989389, [3, -0.346667, 0], [3, 0.346667, 0]], [-0.961776, [3, -0.346667, 0], [3, 0.346667, 0]], [-0.967912, [3, -0.346667, 0.00110799], [3, 0.453333, -0.00144891]], [-0.969447, [3, -0.453333, 0], [3, 0.613333, 0]], [-0.94797, [3, -0.613333, 0], [3, 1.81333, 0]], [-0.967912, [3, -1.81333, 0], [3, 0.6, 0]], [-0.955639, [3, -0.6, 0], [3, 0.466667, 0]], [-0.989389, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("LElbowYaw")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[-1.37451, [3, -0.346667, 0], [3, 0.346667, 0]], [-1.37297, [3, -0.346667, -0.00153425], [3, 0.346667, 0.00153425]], [-1.36223, [3, -0.346667, -0.00117315], [3, 0.453333, 0.00153411]], [-1.3607, [3, -0.453333, 0], [3, 0.613333, 0]], [-1.36223, [3, -0.613333, 0.00129235], [3, 1.81333, -0.00382087]], [-1.37604, [3, -1.81333, 0], [3, 0.6, 0]], [-1.37604, [3, -0.6, 0], [3, 0.466667, 0]], [-1.37451, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("LHand")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[0.2584, [3, -0.346667, 0], [3, 0.346667, 0]], [0.2608, [3, -0.346667, 0], [3, 0.346667, 0]], [0.2512, [3, -0.346667, 0], [3, 0.453333, 0]], [0.2512, [3, -0.453333, 0], [3, 0.613333, 0]], [0.2584, [3, -0.613333, 0], [3, 1.81333, 0]], [0.2512, [3, -1.81333, 0], [3, 0.6, 0]], [0.2512, [3, -0.6, 0], [3, 0.466667, 0]], [0.2584, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("LHipPitch")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[-0.450955, [3, -0.346667, 0], [3, 0.346667, 0]], [-0.446352, [3, -0.346667, 0], [3, 0.346667, 0]], [-0.454021, [3, -0.346667, 0], [3, 0.453333, 0]], [-0.454021, [3, -0.453333, 0], [3, 0.613333, 0]], [-0.447886, [3, -0.613333, 0], [3, 1.81333, 0]], [-0.450955, [3, -1.81333, 0], [3, 0.6, 0]], [-0.443284, [3, -0.6, 0], [3, 0.466667, 0]], [-0.450955, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("LHipRoll")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[-0.00302602, [3, -0.346667, 0], [3, 0.346667, 0]], [-0.00302602, [3, -0.346667, 0], [3, 0.346667, 0]], [0.00617791, [3, -0.346667, 0], [3, 0.453333, 0]], [-0.00149202, [3, -0.453333, 0.00113381], [3, 0.613333, -0.00153398]], [-0.00302601, [3, -0.613333, 0.000258473], [3, 1.81333, -0.000764181]], [-0.00455999, [3, -1.81333, 0], [3, 0.6, 0]], [-0.00302602, [3, -0.6, 0], [3, 0.466667, 0]], [-0.00302602, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("LHipYawPitch")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[0.00157595, [3, -0.346667, 0], [3, 0.346667, 0]], [0.00310993, [3, -0.346667, -0.00102266], [3, 0.346667, 0.00102266]], [0.00771189, [3, -0.346667, -0.000886301], [3, 0.453333, 0.00115901]], [0.00924586, [3, -0.453333, 0], [3, 0.613333, 0]], [0.00464392, [3, -0.613333, 0.000904657], [3, 1.81333, -0.00267464]], [-0.00149202, [3, -1.81333, 0], [3, 0.6, 0]], [-0.00149202, [3, -0.6, 0], [3, 0.466667, 0]], [0.00157595, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("LKneePitch")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[0.70253, [3, -0.346667, 0], [3, 0.346667, 0]], [0.700996, [3, -0.346667, 0], [3, 0.346667, 0]], [0.704064, [3, -0.346667, 0], [3, 0.453333, 0]], [0.700996, [3, -0.453333, 0], [3, 0.613333, 0]], [0.70253, [3, -0.613333, 0], [3, 1.81333, 0]], [0.70253, [3, -1.81333, 0], [3, 0.6, 0]], [0.707132, [3, -0.6, 0], [3, 0.466667, 0]], [0.70253, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("LShoulderPitch")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[1.42504, [3, -0.346667, 0], [3, 0.346667, 0]], [1.47567, [3, -0.346667, 0], [3, 0.346667, 0]], [1.44499, [3, -0.346667, 0], [3, 0.453333, 0]], [1.45419, [3, -0.453333, -0.00456365], [3, 0.613333, 0.00617435]], [1.4772, [3, -0.613333, 0], [3, 1.81333, 0]], [1.45572, [3, -1.81333, 0], [3, 0.6, 0]], [1.47567, [3, -0.6, 0], [3, 0.466667, 0]], [1.42504, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("LShoulderRoll")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[0.279146, [3, -0.346667, 0], [3, 0.346667, 0]], [0.253067, [3, -0.346667, 0], [3, 0.346667, 0]], [0.25767, [3, -0.346667, -0.00177279], [3, 0.453333, 0.00231826]], [0.265341, [3, -0.453333, 0], [3, 0.613333, 0]], [0.25, [3, -0.613333, 0], [3, 1.81333, 0]], [0.260738, [3, -1.81333, 0], [3, 0.6, 0]], [0.254602, [3, -0.6, 0], [3, 0.466667, 0]], [0.279146, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("LWristYaw")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[0.032172, [3, -0.346667, 0], [3, 0.346667, 0]], [0.0137641, [3, -0.346667, 0], [3, 0.346667, 0]], [0.021434, [3, -0.346667, 0], [3, 0.453333, 0]], [0.021434, [3, -0.453333, 0], [3, 0.613333, 0]], [0.00149202, [3, -0.613333, 0], [3, 1.81333, 0]], [0.021434, [3, -1.81333, 0], [3, 0.6, 0]], [0.021434, [3, -0.6, 0], [3, 0.466667, 0]], [0.032172, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("RAnklePitch")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[-0.348176, [3, -0.346667, 0], [3, 0.346667, 0]], [-0.34971, [3, -0.346667, 0], [3, 0.346667, 0]], [-0.34971, [3, -0.346667, 0], [3, 0.453333, 0]], [-0.355846, [3, -0.453333, 0.00130394], [3, 0.613333, -0.00176415]], [-0.358914, [3, -0.613333, 0], [3, 1.81333, 0]], [-0.352778, [3, -1.81333, 0], [3, 0.6, 0]], [-0.354312, [3, -0.6, 0], [3, 0.466667, 0]], [-0.348176, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("RAnkleRoll")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[4.19617e-05, [3, -0.346667, 0], [3, 0.346667, 0]], [0.00310993, [3, -0.346667, 0], [3, 0.346667, 0]], [-0.00302602, [3, -0.346667, 0], [3, 0.453333, 0]], [-0.00149202, [3, -0.453333, -0.00043463], [3, 0.613333, 0.000588029]], [4.19617e-05, [3, -0.613333, -1.92426e-11], [3, 1.81333, 5.68913e-11]], [4.19617e-05, [3, -1.81333, -5.68913e-11], [3, 0.6, 1.88243e-11]], [0.00617791, [3, -0.6, 0], [3, 0.466667, 0]], [4.19617e-05, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("RElbowRoll")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[0.991007, [3, -0.346667, 0], [3, 0.346667, 0]], [0.716419, [3, -0.346667, 0], [3, 0.346667, 0]], [1.07538, [3, -0.346667, -0.0187694], [3, 0.453333, 0.0245446]], [1.09992, [3, -0.453333, 0], [3, 0.613333, 0]], [0.937316, [3, -0.613333, 0], [3, 1.81333, 0]], [1.14441, [3, -1.81333, 0], [3, 0.6, 0]], [0.751703, [3, -0.6, 0], [3, 0.466667, 0]], [0.991007, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("RElbowYaw")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[1.38669, [3, -0.346667, 0], [3, 0.346667, 0]], [1.12591, [3, -0.346667, 0.140872], [3, 0.346667, -0.140872]], [0.54146, [3, -0.346667, 0.127186], [3, 0.453333, -0.16632]], [0.245399, [3, -0.453333, 0.087796], [3, 0.613333, -0.118783]], [-0.0782759, [3, -0.613333, 0], [3, 1.81333, 0]], [0.567537, [3, -1.81333, -0.314665], [3, 0.6, 0.104117]], [1.17807, [3, -0.6, -0.153592], [3, 0.466667, 0.11946]], [1.38669, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("RHand")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 8.16, 11.72, 13.52, 14.92])
    keys.append([[1, [3, -0.346667, 0], [3, 0.346667, 0]], [0.996, [3, -0.346667, 0], [3, 0.346667, 0]], [0.996, [3, -0.346667, 0], [3, 0.453333, 0]], [0.9924, [3, -0.453333, 0], [3, 0.613333, 0]], [0.9948, [3, -0.613333, 0], [3, 0.626667, 0]], [0, [3, -0.626667, 0], [3, 1.18667, 0]], [0.0184, [3, -1.18667, 0], [3, 0.6, 0]], [0.0116, [3, -0.6, 0.00345], [3, 0.466667, -0.00268333]], [0, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("RHipPitch")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[-0.449504, [3, -0.346667, 0], [3, 0.346667, 0]], [-0.446436, [3, -0.346667, -0.000767074], [3, 0.346667, 0.000767074]], [-0.444902, [3, -0.346667, 0], [3, 0.453333, 0]], [-0.449504, [3, -0.453333, 0.00086927], [3, 0.613333, -0.00117607]], [-0.451038, [3, -0.613333, 0], [3, 1.81333, 0]], [-0.438765, [3, -1.81333, 0], [3, 0.6, 0]], [-0.438765, [3, -0.6, 0], [3, 0.466667, 0]], [-0.449504, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("RHipRoll")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[4.19617e-05, [3, -0.346667, 0], [3, 0.346667, 0]], [-0.00302602, [3, -0.346667, 0.000766991], [3, 0.346667, -0.000766991]], [-0.00455999, [3, -0.346667, 0], [3, 0.453333, 0]], [0.00464392, [3, -0.453333, 0], [3, 0.613333, 0]], [0.00310993, [3, -0.613333, 0], [3, 1.81333, 0]], [0.00464392, [3, -1.81333, 0], [3, 0.6, 0]], [0.00464392, [3, -0.6, 0], [3, 0.466667, 0]], [4.19617e-05, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("RHipYawPitch")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[0.00157595, [3, -0.346667, 0], [3, 0.346667, 0]], [0.00310993, [3, -0.346667, -0.00102266], [3, 0.346667, 0.00102266]], [0.00771189, [3, -0.346667, -0.000886301], [3, 0.453333, 0.00115901]], [0.00924586, [3, -0.453333, 0], [3, 0.613333, 0]], [0.00464392, [3, -0.613333, 0.000904657], [3, 1.81333, -0.00267464]], [-0.00149202, [3, -1.81333, 0], [3, 0.6, 0]], [-0.00149202, [3, -0.6, 0], [3, 0.466667, 0]], [0.00157595, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("RKneePitch")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[0.70108, [3, -0.346667, 0], [3, 0.346667, 0]], [0.694945, [3, -0.346667, 0], [3, 0.346667, 0]], [0.696477, [3, -0.346667, -0.000664542], [3, 0.453333, 0.000869017]], [0.699545, [3, -0.453333, 0], [3, 0.613333, 0]], [0.69341, [3, -0.613333, 0.00103386], [3, 1.81333, -0.00305662]], [0.687274, [3, -1.81333, 0], [3, 0.6, 0]], [0.693411, [3, -0.6, -0.00258854], [3, 0.466667, 0.00201331]], [0.70108, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("RShoulderPitch")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[1.41592, [3, -0.346667, 0], [3, 0.346667, 0]], [0.33292, [3, -0.346667, 0.204022], [3, 0.346667, -0.204022]], [0.128898, [3, -0.346667, 0], [3, 0.453333, 0]], [0.174919, [3, -0.453333, 0], [3, 0.613333, 0]], [0.142704, [3, -0.613333, 0], [3, 1.81333, 0]], [0.245482, [3, -1.81333, -0.102778], [3, 0.6, 0.0340075]], [0.633584, [3, -0.6, -0.219458], [3, 0.466667, 0.170689]], [1.41592, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("RShoulderRoll")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[-0.27923, [3, -0.346667, 0], [3, 0.346667, 0]], [-0.791585, [3, -0.346667, 0], [3, 0.346667, 0]], [-0.586029, [3, -0.346667, -0.0658085], [3, 0.453333, 0.0860573]], [-0.335988, [3, -0.453333, -0.0827975], [3, 0.613333, 0.11202]], [-0.00157595, [3, -0.613333, 0], [3, 1.81333, 0]], [-0.282298, [3, -1.81333, 0.194024], [3, 0.6, -0.0641991]], [-0.776246, [3, -0.6, 0], [3, 0.466667, 0]], [-0.27923, [3, -0.466667, 0], [3, 0, 0]]])

    names.append("RWristYaw")
    times.append([1, 2.04, 3.08, 4.44, 6.28, 11.72, 13.52, 14.92])
    keys.append([[0.0291041, [3, -0.346667, 0], [3, 0.346667, 0]], [-0.957259, [3, -0.346667, 0], [3, 0.346667, 0]], [0.06592, [3, -0.346667, -0.104402], [3, 0.453333, 0.136526]], [0.202446, [3, -0.453333, 0], [3, 0.613333, 0]], [0.0214341, [3, -0.613333, 0.0233921], [3, 1.81333, -0.0691592]], [-0.075208, [3, -1.81333, 0], [3, 0.6, 0]], [0.0674542, [3, -0.6, 0], [3, 0.466667, 0]], [0.0291041, [3, -0.466667, 0], [3, 0, 0]]])


    motion_service = session.service("ALMotion")

    try:
        motion_service.angleInterpolationBezier(names, times, keys)
    except Exception as e:
        print("Error occurred during grasp motion: ", e)

def make_nao_retreat(session):
    """
    让NAO机器人后退
    """
    motion_service = session.service("ALMotion")
    motion_service.moveTo(-0.2, 0, 0)
    motion_service.setAngles("RHand", 0.0, 0.2)



def grasp_table_actions(session):
    """
    让机器人执行一系列动作：坐下、抓球、站起来
    """

    # 让机器人抓球
    make_nao_grasp(session)

    # 让机器人后退
    make_nao_retreat(session)


if __name__ == "__main__":
    # 初始化 qi.Session 并连接到 NAOqi 实例
    session = qi.Session()
    try:
        session.connect("tcp://172.20.10.9:9559")
        print("成功连接到 NAO 机器人")
    except RuntimeError as e:
        print(f"无法连接到 NAO 机器人: {e}")
        sys.exit(1)
    SERVER_PORT = 12345

    # Make the robot grasp
    make_nao_grasp(session)

    # Make the robot stand
    make_nao_retreat(session)

    