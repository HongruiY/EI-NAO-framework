import qi
import sys
import threading

def play_music(session):
    """播放音乐文件"""
    audio_service = session.service("ALAudioPlayer")
    
    try:
        filepath = "/home/nao/Taiji.mp3"
        audio_service.playFile(filepath)
        print("音乐播放中...")
    except Exception as e:
        print("播放音乐时发生错误: ", e)

def dance_taiji(session):
    """nao跳太极拳的舞蹈"""
    names = list()
    times = list()
    keys = list()

    names.append("HeadPitch")
    times.append([2.8, 4.8, 6.8, 8.8, 10.8, 12.8, 14.8, 16.8, 18.8, 20.8, 23.4, 26, 28.2, 30.2, 32.2, 34.2, 36.8, 39.4, 42, 44.2, 46, 49.8])
    keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [8.95233e-08, [3, -0.666667, 0], [3, 0.666667, 0]], [-4.76838e-07, [3, -0.666667, 0], [3, 0.666667, 0]], [8.89455e-08, [3, -0.666667, -1.60302e-08], [3, 0.666667, 1.60302e-08]], [1.04976e-07, [3, -0.666667, -1.60302e-08], [3, 0.666667, 1.60302e-08]], [0.331613, [3, -0.666667, 0], [3, 0.666667, 0]], [0.314159, [3, -0.666667, 0.0174533], [3, 0.666667, -0.0174533]], [9.19019e-08, [3, -0.666667, 0.107629], [3, 0.666667, -0.107629]], [-0.331613, [3, -0.666667, 0], [3, 0.666667, 0]], [0.139626, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.0872665, [3, -0.866667, 0], [3, 0.866667, 0]], [0.139626, [3, -0.866667, -0.0850848], [3, 0.733333, 0.0719948]], [0.383972, [3, -0.733333, -0.0731376], [3, 0.666667, 0.0664887]], [0.558505, [3, -0.666667, 0], [3, 0.666667, 0]], [0.383972, [3, -0.666667, 0.148353], [3, 0.666667, -0.148353]], [-0.331613, [3, -0.666667, 0], [3, 0.866667, 0]], [0.139626, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.0872665, [3, -0.866667, 0], [3, 0.866667, 0]], [0.139626, [3, -0.866667, -0.0850848], [3, 0.733333, 0.0719948]], [0.383972, [3, -0.733333, 0], [3, 0.6, 0]], [0, [3, -0.6, 0.0599167], [3, 1.26667, -0.126491]], [-0.17525, [3, -1.26667, 0], [3, 0, 0]]])

    names.append("HeadYaw")
    times.append([2.8, 4.8, 6.8, 8.8, 10.8, 12.8, 14.8, 16.8, 18.8, 20.8, 23.4, 26, 28.2, 30.2, 32.2, 34.2, 36.8, 39.4, 42, 44.2, 46, 49.8])
    keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [8.42936e-08, [3, -0.666667, -1.7461e-13], [3, 0.666667, 1.7461e-13]], [8.42938e-08, [3, -0.666667, 0], [3, 0.666667, 0]], [8.42938e-08, [3, -0.666667, 0], [3, 0.666667, 0]], [-4.76838e-07, [3, -0.666667, 0], [3, 0.666667, 0]], [0.314159, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.296706, [3, -0.666667, 0.250164], [3, 0.666667, -0.250164]], [-1.18682, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.279253, [3, -0.666667, -0.232711], [3, 0.666667, 0.232711]], [0.20944, [3, -0.666667, -0.268123], [3, 0.866667, 0.34856]], [1.5708, [3, -0.866667, 0], [3, 0.866667, 0]], [0.20944, [3, -0.866667, 0.0825065], [3, 0.733333, -0.0698132]], [0.139626, [3, -0.733333, 0.0365688], [3, 0.666667, -0.0332444]], [0, [3, -0.666667, 0.0465421], [3, 0.666667, -0.0465421]], [-0.139626, [3, -0.666667, 0], [3, 0.666667, 0]], [0.279253, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.20944, [3, -0.866667, 0.308341], [3, 0.866667, -0.308341]], [-1.5708, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.20944, [3, -0.866667, -0.0825065], [3, 0.733333, 0.0698132]], [-0.139626, [3, -0.733333, -0.0383972], [3, 0.6, 0.0314159]], [0, [3, -0.6, 0], [3, 1.26667, 0]], [0, [3, -1.26667, 0], [3, 0, 0]]])

    names.append("LAnklePitch")
    times.append([2.8, 4.8, 6.8, 8.8, 10.8, 12.8, 14.8, 16.8, 18.8, 20.8, 23.4, 26, 28.2, 30.2, 32.2, 34.2, 36.8, 39.4, 42, 43.2, 44.2, 46, 49.8])
    keys.append([[1.00403e-07, [3, -1, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 1.00403e-07], [3, 0.666667, -1.00403e-07]], [-0.38661, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.00994623, [3, -0.666667, -0.00994623], [3, 0.666667, 0.00994623]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.647517, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.610865, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.0472, [3, -0.666667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.733333, 0]], [-1.04159, [3, -0.733333, -0.00560775], [3, 0.666667, 0.00509796]], [-0.872665, [3, -0.666667, -0.0499708], [3, 0.666667, 0.0499708]], [-0.741765, [3, -0.666667, -0.1309], [3, 0.666667, 0.1309]], [0, [3, -0.666667, -7.72328e-08], [3, 0.866667, 1.00403e-07]], [1.00403e-07, [3, -0.866667, -1.00403e-07], [3, 0.866667, 1.00403e-07]], [0.523599, [3, -0.866667, 0], [3, 0.866667, 0]], [1.00403e-07, [3, -0.866667, 0.246], [3, 0.4, -0.113538]], [-0.555015, [3, -0.4, 0.119], [3, 0.333333, -0.0991665]], [-0.654498, [3, -0.333333, 0.0585932], [3, 0.6, -0.105468]], [-1.0472, [3, -0.6, 0], [3, 1.26667, 0]], [0.0874194, [3, -1.26667, 0], [3, 0, 0]]])

    names.append("LAnkleRoll")
    times.append([2.8, 4.8, 6.8, 8.8, 10.8, 12.8, 14.8, 16.8, 18.8, 20.8, 23.4, 26, 28.2, 30.2, 32.2, 33.2, 34.2, 36.8, 39.4, 42, 44.2, 46, 49.8])
    keys.append([[0.0523599, [3, -1, 0], [3, 0.666667, 0]], [0.122173, [3, -0.666667, -0.0198691], [3, 0.666667, 0.0198691]], [0.171574, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.121144, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.10472, [3, -0.666667, -0.0164242], [3, 0.666667, 0.0164242]], [0.174533, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.261799, [3, -0.666667, 0], [3, 0.666667, 0]], [0.0628318, [3, -0.666667, -0.010472], [3, 0.666667, 0.010472]], [0.0733038, [3, -0.666667, 0], [3, 0.666667, 0]], [0.00872665, [3, -0.666667, 0], [3, 0.866667, 0]], [0.0314159, [3, -0.866667, 0], [3, 0.866667, 0]], [0.00872665, [3, -0.866667, 0], [3, 0.733333, 0]], [0.121689, [3, -0.733333, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0.060424], [3, 0.666667, -0.060424]], [-0.240855, [3, -0.666667, 0.123724], [3, 0.333333, -0.0618622]], [-0.55676, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.424115, [3, -0.333333, -0.0192309], [3, 0.866667, 0.0500005]], [-0.349066, [3, -0.866667, -0.0706858], [3, 0.866667, 0.0706858]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.349066, [3, -0.866667, 0], [3, 0.733333, 0]], [-0.312414, [3, -0.733333, -0.0366519], [3, 0.6, 0.0299879]], [0, [3, -0.6, 0], [3, 1.26667, 0]], [-0.110793, [3, -1.26667, 0], [3, 0, 0]]])

    names.append("LElbowRoll")
    times.append([2.8, 4.8, 6.8, 8.8, 10.8, 12.8, 14.8, 16.8, 18.8, 20.8, 23.4, 26, 28.2, 30.2, 32.2, 34.2, 36.8, 39.4, 42, 44.2, 45.2, 46, 49.8])
    keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [-0.698132, [3, -0.666667, 0.174533], [3, 0.666667, -0.174533]], [-1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.65806, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.959931, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.48353, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.01229, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.01229, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.01229, [3, -0.866667, 0], [3, 0.733333, 0]], [-1.01229, [3, -0.733333, 0], [3, 0.666667, 0]], [-0.890118, [3, -0.666667, -0.0261799], [3, 0.666667, 0.0261799]], [-0.855211, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.11701, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.855211, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.25664, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.855211, [3, -0.866667, 0], [3, 0.733333, 0]], [-0.855211, [3, -0.733333, 0], [3, 0.333333, 0]], [-0.994838, [3, -0.333333, 0.10472], [3, 0.266667, -0.0837758]], [-1.4207, [3, -0.266667, 0], [3, 1.26667, 0]], [-0.413219, [3, -1.26667, 0], [3, 0, 0]]])

    names.append("LElbowYaw")
    times.append([2.8, 4.8, 6.8, 8.8, 10.8, 12.8, 14.8, 16.8, 18.8, 20.8, 23.4, 26, 28.2, 30.2, 32.2, 34.2, 36.8, 39.4, 42, 44.2, 45.2, 46, 49.8])
    keys.append([[-1.5708, [3, -1, 0], [3, 0.666667, 0]], [-1.5708, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.5708, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.5708, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.5708, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.383972, [3, -0.666667, -0.261799], [3, 0.666667, 0.261799]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.733333, 0]], [0, [3, -0.733333, 0], [3, 0.666667, 0]], [0.20944, [3, -0.666667, 0], [3, 0.666667, 0]], [0.191986, [3, -0.666667, 0.0174533], [3, 0.666667, -0.0174533]], [-0.418879, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.418879, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.0872665, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.418879, [3, -0.866667, 0], [3, 0.733333, 0]], [0.191986, [3, -0.733333, 0], [3, 0.333333, 0]], [-0.378736, [3, -0.333333, 0], [3, 0.266667, 0]], [-0.244346, [3, -0.266667, 0], [3, 1.26667, 0]], [-1.20102, [3, -1.26667, 0], [3, 0, 0]]])

    names.append("LHand")
    times.append([2.8, 49.8])
    keys.append([[0, [3, -1, 0], [3, 15.6667, 0]], [0.291787, [3, -15.6667, 0], [3, 0, 0]]])

    names.append("LHipPitch")
    times.append([2.8, 4.8, 6.8, 8.8, 10.8, 12.8, 14.8, 16.8, 18.8, 20.8, 23.4, 26, 28.2, 30.2, 32.2, 34.2, 36.8, 39.4, 42, 44.2, 46, 49.8])
    keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.346265, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.000667878, [3, -0.666667, -0.000667878], [3, 0.666667, 0.000667878]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.698132, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.610865, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.0472, [3, -0.666667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.733333, 0]], [-1.04159, [3, -0.733333, -0.00560775], [3, 0.666667, 0.00509796]], [-0.872665, [3, -0.666667, -0.0499708], [3, 0.666667, 0.0499708]], [-0.741765, [3, -0.666667, -0.125082], [3, 0.666667, 0.125082]], [-0.122173, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.872665, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.872665, [3, -0.866667, 0], [3, 0.733333, 0]], [-0.654498, [3, -0.733333, 0], [3, 0.6, 0]], [-1.0472, [3, -0.6, 0], [3, 1.26667, 0]], [0.127419, [3, -1.26667, 0], [3, 0, 0]]])

    names.append("LHipRoll")
    times.append([2.8, 4.8, 6.8, 8.8, 10.8, 12.8, 14.8, 16.8, 18.8, 20.8, 23.4, 26, 28.2, 30.2, 32.2, 33.2, 34.2, 36.8, 39.4, 42, 44.2, 46, 49.8])
    keys.append([[-0.0523599, [3, -1, 0], [3, 0.666667, 0]], [-0.122173, [3, -0.666667, 0.024503], [3, 0.666667, -0.024503]], [-0.199378, [3, -0.666667, 0], [3, 0.666667, 0]], [0.104072, [3, -0.666667, -0.000647864], [3, 0.666667, 0.000647864]], [0.10472, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.174533, [3, -0.666667, 0], [3, 0.666667, 0]], [0.174533, [3, -0.666667, -0.0991929], [3, 0.666667, 0.0991929]], [0.420624, [3, -0.666667, -0.0590503], [3, 0.666667, 0.0590503]], [0.528835, [3, -0.666667, 0], [3, 0.666667, 0]], [0.50091, [3, -0.666667, 0], [3, 0.866667, 0]], [0.565487, [3, -0.866667, 0], [3, 0.866667, 0]], [0.50091, [3, -0.866667, 0.0391299], [3, 0.733333, -0.0331099]], [0.348767, [3, -0.733333, 0.0874604], [3, 0.666667, -0.0795094]], [0, [3, -0.666667, 0.101761], [3, 0.666667, -0.101761]], [-0.261799, [3, -0.666667, 0], [3, 0.333333, 0]], [0.251327, [3, -0.333333, -0.010472], [3, 0.333333, 0.010472]], [0.261799, [3, -0.333333, 0], [3, 0.866667, 0]], [0.139626, [3, -0.866667, 0], [3, 0.866667, 0]], [0.698132, [3, -0.866667, 0], [3, 0.866667, 0]], [0.139626, [3, -0.866667, 0.173321], [3, 0.733333, -0.146656]], [-0.261799, [3, -0.733333, 0], [3, 0.6, 0]], [0, [3, -0.6, -0.0408115], [3, 1.26667, 0.0861577]], [0.119108, [3, -1.26667, 0], [3, 0, 0]]])

    names.append("LHipYawPitch")
    times.append([2.8, 4.8, 6.8, 8.8, 10.8, 12.8, 14.8, 16.8, 18.8, 20.8, 23.4, 26, 28.2, 30.2, 32.2, 34.2, 36.8, 39.4, 42, 44.2, 46, 49.8])
    keys.append([[-0.10821, [3, -1, 0], [3, 0.666667, 0]], [-0.120428, [3, -0.666667, 0.000716282], [3, 0.666667, -0.000716282]], [-0.121144, [3, -0.666667, 0.000434528], [3, 0.666667, -0.000434528]], [-0.123035, [3, -0.666667, 0.00189089], [3, 0.666667, -0.00189089]], [-0.143117, [3, -0.666667, 0.00741945], [3, 0.666667, -0.00741945]], [-0.167552, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.0994838, [3, -0.666667, -0.0279253], [3, 0.666667, 0.0279253]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.733333, 0]], [-0.00988797, [3, -0.733333, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.733333, 0]], [-0.0680678, [3, -0.733333, 0], [3, 0.6, 0]], [0, [3, -0.6, 0], [3, 1.26667, 0]], [-0.17001, [3, -1.26667, 0], [3, 0, 0]]])

    names.append("LKneePitch")
    times.append([2.8, 4.8, 6.8, 8.8, 10.8, 12.8, 14.8, 16.8, 18.8, 20.8, 23.4, 26, 28.2, 30.2, 32.2, 34.2, 36.8, 39.4, 42, 44.2, 46, 49.8])
    keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0.747017, [3, -0.666667, 0], [3, 0.666667, 0]], [0.0016602, [3, -0.666667, 0.0016603], [3, 0.666667, -0.0016603]], [-9.9341e-08, [3, -0.666667, 0], [3, 0.666667, 0]], [1.39626, [3, -0.666667, 0], [3, 0.666667, 0]], [1.22173, [3, -0.666667, 0], [3, 0.666667, 0]], [2.0944, [3, -0.666667, 0], [3, 0.666667, 0]], [2.0944, [3, -0.666667, 0], [3, 0.666667, 0]], [2.0944, [3, -0.666667, 0], [3, 0.866667, 0]], [2.0944, [3, -0.866667, 0], [3, 0.866667, 0]], [2.0944, [3, -0.866667, 0], [3, 0.733333, 0]], [2.10988, [3, -0.733333, 0], [3, 0.666667, 0]], [1.74533, [3, -0.666667, 0.104391], [3, 0.666667, -0.104391]], [1.48353, [3, -0.666667, 0.261799], [3, 0.666667, -0.261799]], [0.122173, [3, -0.666667, 0], [3, 0.866667, 0]], [1.74533, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [1.74533, [3, -0.866667, 0], [3, 0.733333, 0]], [1.309, [3, -0.733333, 0], [3, 0.6, 0]], [2.0944, [3, -0.6, 0], [3, 1.26667, 0]], [-0.0888383, [3, -1.26667, 0], [3, 0, 0]]])

    names.append("LShoulderPitch")
    times.append([2.8, 4.8, 6.8, 8.8, 10.8, 12.8, 14.8, 16.8, 18.8, 20.8, 23.4, 26, 28.2, 30.2, 32.2, 34.2, 36.8, 39.4, 42, 44.2, 46, 49.8])
    keys.append([[1.5708, [3, -1, 0], [3, 0.666667, 0]], [1.91986, [3, -0.666667, -0.0872665], [3, 0.666667, 0.0872665]], [2.0944, [3, -0.666667, 0], [3, 0.666667, 0]], [1.5708, [3, -0.666667, 0.349066], [3, 0.666667, -0.349066]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0.366519, [3, -0.666667, 0], [3, 0.666667, 0]], [0.349066, [3, -0.666667, 0.0174533], [3, 0.666667, -0.0174533]], [0.191986, [3, -0.666667, 0.15708], [3, 0.666667, -0.15708]], [-0.802851, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.174533, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.296706, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.174533, [3, -0.866667, -0.122173], [3, 0.733333, 0.103377]], [0.523599, [3, -0.733333, 0], [3, 0.666667, 0]], [0.471239, [3, -0.666667, 0.0319977], [3, 0.666667, -0.0319977]], [0.331613, [3, -0.666667, 0.139626], [3, 0.666667, -0.139626]], [-0.471239, [3, -0.666667, 0], [3, 0.866667, 0]], [0.0698132, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.0698132, [3, -0.866667, 0], [3, 0.866667, 0]], [0.0698132, [3, -0.866667, -0.0724796], [3, 0.733333, 0.0613289]], [0.331613, [3, -0.733333, -0.261799], [3, 0.6, 0.214199]], [1.69297, [3, -0.6, 0], [3, 1.26667, 0]], [1.44891, [3, -1.26667, 0], [3, 0, 0]]])

    names.append("LShoulderRoll")
    times.append([2.8, 4.8, 6.8, 8.8, 10.8, 12.8, 14.8, 16.8, 18.8, 20.8, 23.4, 26, 28.2, 30.2, 32.2, 34.2, 36.8, 39.4, 42, 44.2, 46, 49.8])
    keys.append([[0.174533, [3, -1, 0], [3, 0.666667, 0]], [0.349066, [3, -0.666667, 0], [3, 0.666667, 0]], [0.174533, [3, -0.666667, 0], [3, 0.666667, 0]], [0.174533, [3, -0.666667, 0], [3, 0.666667, 0]], [0.174533, [3, -0.666667, 0], [3, 0.666667, 0]], [0.698132, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0.0872665, [3, -0.666667, -0.0290888], [3, 0.666667, 0.0290888]], [0.174533, [3, -0.666667, -0.0523599], [3, 0.666667, 0.0523599]], [0.401426, [3, -0.666667, -0.14165], [3, 0.866667, 0.184145]], [1.15192, [3, -0.866667, 0], [3, 0.866667, 0]], [0.401426, [3, -0.866667, 0], [3, 0.733333, 0]], [0.401426, [3, -0.733333, 0], [3, 0.666667, 0]], [0.174533, [3, -0.666667, 0.0669043], [3, 0.666667, -0.0669043]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0.401426, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.733333, 0]], [0.20944, [3, -0.733333, -0.172788], [3, 0.6, 0.141372]], [0.942478, [3, -0.6, 0], [3, 1.26667, 0]], [0.222919, [3, -1.26667, 0], [3, 0, 0]]])

    names.append("LWristYaw")
    times.append([2.8, 49.8])
    keys.append([[-1.53589, [3, -1, 0], [3, 15.6667, 0]], [0.101043, [3, -15.6667, 0], [3, 0, 0]]])

    names.append("RAnklePitch")
    times.append([2.8, 4.8, 6.8, 8.8, 10.8, 12.8, 14.8, 16.8, 18.8, 20.8, 23.4, 26, 28.2, 30.2, 32.2, 34.2, 36.8, 39.4, 42, 44.2, 46, 49.8])
    keys.append([[1.00403e-07, [3, -1, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0.00464395, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.00609404, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.698132, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.174533, [3, -0.666667, -0.116355], [3, 0.666667, 0.116355]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [1.00403e-07, [3, -0.666667, -1.00403e-07], [3, 0.866667, 1.30524e-07]], [0.523599, [3, -0.866667, 0], [3, 0.866667, 0]], [1.00403e-07, [3, -0.866667, 0.239111], [3, 0.733333, -0.202324]], [-0.800706, [3, -0.733333, 0.079154], [3, 0.666667, -0.0719582]], [-0.872665, [3, -0.666667, 0.0410818], [3, 0.666667, -0.0410818]], [-1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.0472, [3, -0.666667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.733333, 0]], [-1.0472, [3, -0.733333, 0], [3, 0.6, 0]], [-1.0472, [3, -0.6, 0], [3, 1.26667, 0]], [0.0874194, [3, -1.26667, 0], [3, 0, 0]]])

    names.append("RAnkleRoll")
    times.append([2.8, 4.8, 6.8, 8.8, 10.8, 12.8, 14.8, 16.8, 18.8, 20.8, 23.4, 26, 28.2, 30.2, 32.2, 34.2, 36.8, 39.4, 42, 44.2, 46, 49.8])
    keys.append([[-0.0523599, [3, -1, 0], [3, 0.666667, 0]], [0.1309, [3, -0.666667, -0.0745619], [3, 0.666667, 0.0745619]], [0.395012, [3, -0.666667, 0], [3, 0.666667, 0]], [0.116626, [3, -0.666667, 0.0119063], [3, 0.666667, -0.0119063]], [0.10472, [3, -0.666667, 0], [3, 0.666667, 0]], [0.294961, [3, -0.666667, -0.0861029], [3, 0.666667, 0.0861029]], [0.621337, [3, -0.666667, -0.0817396], [3, 0.666667, 0.0817396]], [0.785398, [3, -0.666667, 0], [3, 0.666667, 0]], [0.74351, [3, -0.666667, 0.0418879], [3, 0.666667, -0.0418879]], [0.436332, [3, -0.666667, 0.107755], [3, 0.866667, -0.140082]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0.436332, [3, -0.866667, 0], [3, 0.733333, 0]], [0.171621, [3, -0.733333, 0.076185], [3, 0.666667, -0.0692591]], [0, [3, -0.666667, 0.0576924], [3, 0.666667, -0.0576924]], [-0.174533, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.0421551, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.0556318, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.0125362, [3, -0.866667, -0.00278022], [3, 0.866667, 0.00278022]], [-0.00975599, [3, -0.866667, 0], [3, 0.733333, 0]], [-0.0270601, [3, -0.733333, 0], [3, 0.6, 0]], [0, [3, -0.6, -0.0147695], [3, 1.26667, 0.0311802]], [0.110789, [3, -1.26667, 0], [3, 0, 0]]])

    names.append("RElbowRoll")
    times.append([2.8, 4.8, 6.8, 8.8, 10.8, 12.8, 14.8, 16.8, 18.8, 20.8, 23.4, 26, 28.2, 30.2, 32.2, 34.2, 36.8, 39.4, 42, 44.2, 45.2, 46, 49.8])
    keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [0.698132, [3, -0.666667, -0.174533], [3, 0.666667, 0.174533]], [1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [2.57424e-07, [3, -0.666667, 2.57424e-07], [3, 0.666667, -2.57424e-07]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [1.23918, [3, -0.666667, -0.273435], [3, 0.666667, 0.273435]], [1.64061, [3, -0.666667, 0], [3, 0.666667, 0]], [0.0698132, [3, -0.666667, 0], [3, 0.666667, 0]], [1.11701, [3, -0.666667, 0], [3, 0.666667, 0]], [0.855211, [3, -0.666667, 0], [3, 0.866667, 0]], [1.25664, [3, -0.866667, 0], [3, 0.866667, 0]], [0.855211, [3, -0.866667, 0], [3, 0.733333, 0]], [0.855211, [3, -0.733333, 0], [3, 0.666667, 0]], [0.890118, [3, -0.666667, -0.0261799], [3, 0.666667, 0.0261799]], [1.01229, [3, -0.666667, 0], [3, 0.666667, 0]], [1.01229, [3, -0.666667, 0], [3, 0.866667, 0]], [1.01229, [3, -0.866667, 0], [3, 0.866667, 0]], [0.0349066, [3, -0.866667, 0], [3, 0.866667, 0]], [1.01229, [3, -0.866667, 0], [3, 0.733333, 0]], [1.01229, [3, -0.733333, 0], [3, 0.333333, 0]], [1.13272, [3, -0.333333, -0.0656115], [3, 0.266667, 0.0524892]], [1.36659, [3, -0.266667, 0], [3, 1.26667, 0]], [0.40818, [3, -1.26667, 0], [3, 0, 0]]])

    names.append("RElbowYaw")
    times.append([2.8, 4.8, 6.8, 8.8, 10.8, 12.8, 14.8, 16.8, 18.8, 20.8, 23.4, 26, 28.2, 30.2, 32.2, 34.2, 36.8, 39.4, 42, 44.2, 45.2, 46, 49.8])
    keys.append([[1.5708, [3, -1, 0], [3, 0.666667, 0]], [1.5708, [3, -0.666667, 0], [3, 0.666667, 0]], [1.5708, [3, -0.666667, 0], [3, 0.666667, 0]], [1.5708, [3, -0.666667, 0], [3, 0.666667, 0]], [1.5708, [3, -0.666667, 0], [3, 0.666667, 0]], [0.191986, [3, -0.666667, 0], [3, 0.666667, 0]], [0.349066, [3, -0.666667, -0.15708], [3, 0.666667, 0.15708]], [1.5708, [3, -0.666667, 0], [3, 0.666667, 0]], [0.418879, [3, -0.666667, 0], [3, 0.666667, 0]], [0.418879, [3, -0.666667, 0], [3, 0.866667, 0]], [0.0872665, [3, -0.866667, 0], [3, 0.866667, 0]], [0.418879, [3, -0.866667, 0], [3, 0.733333, 0]], [-0.191986, [3, -0.733333, 0.0191986], [3, 0.666667, -0.0174533]], [-0.20944, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.733333, 0]], [0, [3, -0.733333, 0], [3, 0.333333, 0]], [0.342085, [3, -0.333333, 0], [3, 0.266667, 0]], [0.244346, [3, -0.266667, 0], [3, 1.26667, 0]], [1.20177, [3, -1.26667, 0], [3, 0, 0]]])

    names.append("RHand")
    times.append([2.8, 49.8])
    keys.append([[0, [3, -1, 0], [3, 15.6667, 0]], [0.301984, [3, -15.6667, 0], [3, 0, 0]]])

    names.append("RHipPitch")
    times.append([2.8, 4.8, 6.8, 8.8, 10.8, 12.8, 14.8, 16.8, 18.8, 20.8, 23.4, 26, 28.2, 30.2, 32.2, 34.2, 36.8, 39.4, 42, 44.2, 46, 49.8])
    keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0.00235115, [3, -0.666667, -0.000624362], [3, 0.666667, 0.000624362]], [0.00374617, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0.00374617], [3, 0.666667, -0.00374617]], [-0.698132, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.174533, [3, -0.666667, -0.0698132], [3, 0.666667, 0.0698132]], [-0.10472, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.122173, [3, -0.666667, 0.0174533], [3, 0.666667, -0.0174533]], [-0.872665, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.872665, [3, -0.866667, 0], [3, 0.733333, 0]], [-0.791585, [3, -0.733333, 0], [3, 0.666667, 0]], [-0.872665, [3, -0.666667, 0.042602], [3, 0.666667, -0.042602]], [-1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [-1.0472, [3, -0.666667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.866667, 0]], [-1.0472, [3, -0.866667, 0], [3, 0.733333, 0]], [-1.0472, [3, -0.733333, 0], [3, 0.6, 0]], [-1.0472, [3, -0.6, 0], [3, 1.26667, 0]], [0.127419, [3, -1.26667, 0], [3, 0, 0]]])

    names.append("RHipRoll")
    times.append([2.8, 4.8, 6.8, 8.8, 10.8, 12.8, 14.8, 16.8, 18.8, 20.8, 23.4, 26, 28.2, 30.2, 32.2, 34.2, 36.8, 39.4, 42, 44.2, 46, 49.8])
    keys.append([[0.0523599, [3, -1, 0], [3, 0.666667, 0]], [-0.122173, [3, -0.666667, 0.0811526], [3, 0.666667, -0.0811526]], [-0.434556, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.105561, [3, -0.666667, -0.000841426], [3, 0.666667, 0.000841426]], [-0.10472, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.349066, [3, -0.666667, 0.113446], [3, 0.666667, -0.113446]], [-0.785398, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.541052, [3, -0.666667, -0.0939569], [3, 0.666667, 0.0939569]], [-0.221657, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.446804, [3, -0.666667, 0.0690543], [3, 0.866667, -0.0897706]], [-0.698132, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.446804, [3, -0.866667, -0.173975], [3, 0.733333, 0.14721]], [0.265424, [3, -0.733333, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0.102415], [3, 0.666667, -0.102415]], [-0.349066, [3, -0.666667, 0.0898845], [3, 0.666667, -0.0898845]], [-0.539307, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.511381, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.596903, [3, -0.866667, 0.0139626], [3, 0.866667, -0.0139626]], [-0.610865, [3, -0.866667, 0], [3, 0.733333, 0]], [-0.532325, [3, -0.733333, -0.0785398], [3, 0.6, 0.0642598]], [0, [3, -0.6, 0], [3, 1.26667, 0]], [-0.119102, [3, -1.26667, 0], [3, 0, 0]]])

    names.append("RHipYawPitch")
    times.append([2.8, 4.8, 6.8, 8.8, 10.8, 12.8, 28.2, 49.8])
    keys.append([[-0.10821, [3, -1, 0], [3, 0.666667, 0]], [-0.120428, [3, -0.666667, 0.00394526], [3, 0.666667, -0.00394526]], [-0.131882, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.123035, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.143117, [3, -0.666667, 0.00741945], [3, 0.666667, -0.00741945]], [-0.167552, [3, -0.666667, 0], [3, 5.13333, 0]], [0.00310997, [3, -5.13333, 0], [3, 7.2, 0]], [-0.17001, [3, -7.2, 0], [3, 0, 0]]])

    names.append("RKneePitch")
    times.append([2.8, 4.8, 6.8, 8.8, 10.8, 12.8, 14.8, 16.8, 18.8, 20.8, 23.4, 26, 28.2, 30.2, 32.2, 34.2, 36.8, 39.4, 42, 44.2, 46, 49.8])
    keys.append([[0, [3, -1, 0], [3, 0.666667, 0]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0.00310997, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.00717126, [3, -0.666667, 0], [3, 0.666667, 0]], [0, [3, -0.666667, -0.00717126], [3, 0.666667, 0.00717126]], [1.39626, [3, -0.666667, 0], [3, 0.666667, 0]], [0.349066, [3, -0.666667, 0.212348], [3, 0.666667, -0.212348]], [0.122173, [3, -0.666667, 0], [3, 0.666667, 0]], [0.122173, [3, -0.666667, 0], [3, 0.666667, 0]], [1.74533, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [1.74533, [3, -0.866667, 0], [3, 0.733333, 0]], [1.57086, [3, -0.733333, 0], [3, 0.666667, 0]], [1.74533, [3, -0.666667, -0.0872563], [3, 0.666667, 0.0872563]], [2.0944, [3, -0.666667, 0], [3, 0.666667, 0]], [2.0944, [3, -0.666667, 0], [3, 0.866667, 0]], [2.0944, [3, -0.866667, 0], [3, 0.866667, 0]], [2.0944, [3, -0.866667, 0], [3, 0.866667, 0]], [2.0944, [3, -0.866667, 0], [3, 0.733333, 0]], [2.0944, [3, -0.733333, 0], [3, 0.6, 0]], [2.0944, [3, -0.6, 0], [3, 1.26667, 0]], [-0.0918221, [3, -1.26667, 0], [3, 0, 0]]])

    names.append("RShoulderPitch")
    times.append([2.8, 4.8, 6.8, 8.8, 10.8, 12.8, 14.8, 16.8, 18.8, 20.8, 23.4, 26, 28.2, 30.2, 32.2, 34.2, 36.8, 39.4, 42, 44.2, 46, 49.8])
    keys.append([[1.5708, [3, -1, 0], [3, 0.666667, 0]], [1.91986, [3, -0.666667, -0.0872665], [3, 0.666667, 0.0872665]], [2.0944, [3, -0.666667, 0], [3, 0.666667, 0]], [1.5708, [3, -0.666667, 0.349066], [3, 0.666667, -0.349066]], [0, [3, -0.666667, 0], [3, 0.666667, 0]], [0.174533, [3, -0.666667, -0.101811], [3, 0.666667, 0.101811]], [0.610865, [3, -0.666667, -0.145444], [3, 0.666667, 0.145444]], [1.0472, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.471239, [3, -0.666667, 0], [3, 0.666667, 0]], [0.0698132, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.0698132, [3, -0.866667, 0], [3, 0.866667, 0]], [0.0698132, [3, -0.866667, -0.0724796], [3, 0.733333, 0.0613289]], [0.331613, [3, -0.733333, -0.0700902], [3, 0.666667, 0.0637184]], [0.471239, [3, -0.666667, -0.0319977], [3, 0.666667, 0.0319977]], [0.523599, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.802851, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.174533, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.296706, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.174533, [3, -0.866667, -0.122173], [3, 0.733333, 0.103377]], [0.523599, [3, -0.733333, -0.342375], [3, 0.6, 0.280125]], [1.69297, [3, -0.6, 0], [3, 1.26667, 0]], [1.44415, [3, -1.26667, 0], [3, 0, 0]]])

    names.append("RShoulderRoll")
    times.append([2.8, 4.8, 6.8, 8.8, 10.8, 12.8, 14.8, 16.8, 18.8, 20.8, 23.4, 26, 28.2, 30.2, 32.2, 34.2, 36.8, 39.4, 42, 44.2, 46, 49.8])
    keys.append([[-0.174533, [3, -1, 0], [3, 0.666667, 0]], [-0.174533, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.349066, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.174533, [3, -0.666667, -1.81594e-05], [3, 0.666667, 1.81594e-05]], [-0.174515, [3, -0.666667, -1.81594e-05], [3, 0.666667, 1.81594e-05]], [-0.0698132, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.837758, [3, -0.666667, 0.241437], [3, 0.666667, -0.241437]], [-1.51844, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.401426, [3, -0.666667, -0.253073], [3, 0.666667, 0.253073]], [0, [3, -0.666667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.866667, 0]], [0, [3, -0.866667, 0], [3, 0.733333, 0]], [0, [3, -0.733333, 0], [3, 0.666667, 0]], [-0.174533, [3, -0.666667, 0.0669043], [3, 0.666667, -0.0669043]], [-0.401426, [3, -0.666667, 0], [3, 0.666667, 0]], [-0.174533, [3, -0.666667, 0], [3, 0.866667, 0]], [-0.401426, [3, -0.866667, 0.162897], [3, 0.866667, -0.162897]], [-1.15192, [3, -0.866667, 0], [3, 0.866667, 0]], [-0.401426, [3, -0.866667, 0], [3, 0.733333, 0]], [-0.558505, [3, -0.733333, 0.0991929], [3, 0.6, -0.0811578]], [-0.942478, [3, -0.6, 0], [3, 1.26667, 0]], [-0.220461, [3, -1.26667, 0], [3, 0, 0]]])

    names.append("RWristYaw")
    times.append([2.8, 49.8])
    keys.append([[1.53589, [3, -1, 0], [3, 15.6667, 0]], [0.108783, [3, -15.6667, 0], [3, 0, 0]]])

    motion_service = session.service("ALMotion")
    posture_service = session.service("ALRobotPosture")

    try:
        # 让机器人进入站立姿势
        posture_service.goToPosture("StandInit", 0.5)
        # 执行太极动作，直到收到停止信号
        motion_service.angleInterpolationBezier(names, times, keys)
    except Exception as e:
        print("Error occurred during taiji dance: ", e)

def start_dance_and_music(session):
    """启动舞蹈和音乐的函数，便于外部调用"""
    # 创建线程分别播放音乐和执行舞蹈
    music_thread = threading.Thread(target=play_music, args=(session,))
    dance_thread = threading.Thread(target=dance_taiji, args=(session,))

    # 启动线程
    music_thread.start()
    dance_thread.start()

    # 等待线程结束
    music_thread.join()
    dance_thread.join()
    
if __name__ == "__main__":
    session = qi.Session()
    try:
        session.connect("tcp://172.20.10.5:9559")
        print("成功连接到 NAO 机器人")
    except RuntimeError as e:
        print(f"无法连接到 NAO 机器人: {e}")
        sys.exit(1)
    
    start_dance_and_music(session)